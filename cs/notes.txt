Results for the extraLargeArray
insert 1.0424014 s
append 3.0225 ms

Results for the tinyArray
insert 38.4 μs
append 118.2 μs

Results for the smallArray
insert 50.1 μs
append 108.2 μs

Results for the mediumArray
insert 179.1 μs
append 154.8 μs

Results for the largeArray
insert 9.275 ms
append 502.2 μs

Array       Insert(.unshift)     Append(.push)
tinyArray || 38.4 μs || 118.2 μs
smallArray || 50.1 μs || 108.2 μs
mediumArray || 179.1 μs || 154.8 μs
largeArray || 9.275 ms || 502.2 μs
extraLargeArray || 1.0424014 s || 3.0225 ms

As far as I can tell the "append" function is the more efficient for scaling purposes. The biggest indicator of this is the returned time for processing. The reason for the longer time is that the “.unshift” function adds the new numbers generated to the beginning of the array. This causes the for loop to review all the new numbers added to the array as the function continues multiplying. 